## [START cloudbuild_basic_config]
#steps:
#  # Docker Build
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['build', '-t',
#           'us-central1-docker.pkg.dev/klara-comm-nonprod/springboot-registry/my-klara-app:${SHORT_SHA}',
#           '.']
#
#  # Docker Push
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['push',
#           'us-central1-docker.pkg.dev/klara-comm-nonprod/springboot-registry/my-klara-app:${SHORT_SHA}']
#
#  #Store images in google artifact registory
#images:
#  - us-central1-docker.pkg.dev/klara-comm-nonprod/springboot-registry/my-klara-app:${SHORT_SHA}
#
## Build logs bucket
#  - name: 'gs://klara-comm-nonprod.appspot.com'
#
#options:
#  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
#  logging: CLOUD_LOGGING_ONLY
## [END cloudbuild_basic_config]

#steps:
#  # build the container image
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['build', '-t', 'gcr.io/klara-comm-nonprod/github.com/parthavdevs198/springboot-docker-app:$COMMIT_SHA', '.']
#  # push the container image to Container Registry
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['push', 'gcr.io/klara-comm-nonprod/github.com/parthavdevs198/springboot-docker-app:$COMMIT_SHA']
#  # Deploy container image to Cloud Run
#  - name: 'gcr.io/cloud-builders/gcloud'
#    args:
#      - 'run'
#      - 'deploy'
#      - 'demo-app'
#      - '--image'
#      - 'gcr.io/klara-comm-nonprod/github.com/parthavdevs198/springboot-docker-app:$COMMIT_SHA'
#      - '--region'
#      - 'us-central1'
#      - '--platform'
#      - 'managed'
#images:
#  - 'gcr.io/klara-comm-nonprod/github.com/parthavdevs198/springboot-docker-app:$COMMIT_SHA'

#  - name: 'gcloud pubsub topics create springboot-pub-sub-topics'
#    args: [ 'pubsub', 'topics', 'create', 'springboot-pub-sub-topics' ]


#main start
#steps:
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['build', '-t', 'gcr.io/$PROJECT_ID/epost-hub-deployment-image:latest', '-t', 'gcr.io/$PROJECT_ID/epost-hub-deployment-image:$COMMIT_SHA', '-t', 'gcr.io/$PROJECT_ID/epost-hub-deployment-image:$BUILD_ID', '.']
#    id: 'build-image-springboot-docker-app'
#    waitFor: ['-']  # The '-' indicates that this step begins immediately.
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['push', 'gcr.io/$PROJECT_ID/epost-hub-deployment-image:$COMMIT_SHA'] #us-central1-docker.pkg.dev/klara-comm-nonprod/springboot-registry
#    id: 'push-image-to-container-registry'
#    waitFor: ['build-image-springboot-docker-app']
#  - name: 'gcr.io/cloud-builders/gcloud'
#
#    args:
#      - 'app'
#      - 'deploy'
#    waitFor: ['push-image-to-container-registry']
#    id: 'deploy-to-app-engine'
#main end


#test terraform
#
#steps:
##  - name: 'gcr.io/cloud-builders/docker'
##    args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/epost-image:latest', '-t', 'gcr.io/$PROJECT_ID/epost-image:$COMMIT_SHA', '-t', 'gcr.io/$PROJECT_ID/epost-image:$BUILD_ID', '.' ]
##    id: 'build-image-springboot-docker-app'
##    waitFor: [ '-' ]  # The '-' indicates that this step begins immediately.
#
#  - id: 'branch name'
#    name: 'alpine'
#    entrypoint: 'sh'
#    args:
#      - '-c'
#      - |
#        echo "***********************"
#        echo "$BRANCH_NAME"
#        echo "***********************"
#
#  - id: 'tf init'
#    name: 'hashicorp/terraform:1.0.0'
#    entrypoint: 'sh'
#    args:
#      - '-c'
#      - |
#          terraform init
#
#  # [START tf-plan]
#  - id: 'tf plan'
#    name: 'hashicorp/terraform:1.0.0'
#    entrypoint: 'sh'
#    args:
#      - '-c'
#      - |
#          terraform plan
#  # [END tf-plan]
#
#  # [START tf-apply]
#  - id: 'tf apply'
#    name: 'hashicorp/terraform:1.0.0'
#    entrypoint: 'sh'
#    args:
#      - '-c'
#      - |
#          terraform apply --auto-approve

#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'push', '$registry/epost-image:$COMMIT_SHA' ]
#    id: 'push-image-to-container-registry'
#    waitFor: [ 'build-image-springboot-docker-app' ]

# [END tf-apply]



  I apologize for any confusion. The error you're encountering is because the google_container_registry_image data source in Terraform doesn't have an attribute called image_digest.

To retrieve the digest of a Docker image in Google Container Registry, you can use the gcloud command-line tool within a Cloud Build step. Here's an updated cloudbuild.yaml file to run Terraform commands and retrieve the Docker image digest:

  yaml
  Copy code
steps:
  # Step 1: Check out your Terraform configuration from your source repository.
#  - name: 'gcr.io/cloud-builders/git'
#    args: ['clone', 'https://github.com/your-repo/your-terraform-project', '.']

  # Step 2: Run `terraform init` to initialize the Terraform workspace.
  - name: 'hashicorp/terraform:1.0.0'
    args: ['init']

  # Step 3: Run `terraform plan` to preview changes.
  - name: 'hashicorp/terraform:1.0.0'
    args: ['plan', '-out', 'tfplan']

  # Step 4: Run `terraform apply` to apply changes.
  - name: 'hashicorp/terraform:1.0.0'
    args: ['apply', 'tfplan']

  # Step 5: Retrieve the Docker image digest.
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['container', 'images', 'describe', 'gcr.io/$PROJECT_ID/klara-epost-hub:latest', '--format=value(image_summary.digest)']
